---
title: Homework 7 - Creating a resume database
author: Eddsy Ortiz 
date: 11/15/23
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This file is a scaffold document written in Quarto (`.qmd` extension) that includes Python code snippets using the Quarto evaluation (`#| eval: true`) and echo (`#| echo: false`) directives. The document focuses on connecting to a MySQL database using SQLAlchemy and executing sample SQL queries. It also includes sections describing the database schema, a crow's-foot diagram, examples of data in the database tables (`people`, `skills`, `roles`), and sample queries for exploring the database. Additionally, the document contains a section for reflection, inviting the author to share their thoughts and insights about the assignment.


GITHUB URL: https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-EddsyO

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The project involves setting up a MySQL database for a learning platform or similar system. The database appears to manage information about people (likely users or participants), their skills, and assigned roles. The database schema includes tables such as `people`, `skills`, `roles`, `peopleskills`, and `peopleroles`. The `people` table likely stores user information, the `skills` table contains information about various skills, and the `roles` table defines different roles. The relationships between people, skills, and roles are managed through the `peopleskills` and `peopleroles` tables, which track the acquisition of skills and assignment of roles to individuals, respectively. The project aims to organize and track user data, skills, and roles within the specified MySQL database.

## Crows-foot diagram

The Mermaid code provided depicts an Entity-Relationship (ER) diagram representing the structure of a database. The diagram includes three entities: CUSTOMER, ORDER, and DELIVERY-ADDRESS. Arrows and notations illustrate the relationships between these entities, specifying that a CUSTOMER can place multiple ORDERs (one-to-many) and use multiple DELIVERY-ADDRESSes (many-to-many). Attributes such as "id," "first_name," and "last_name" are associated with the CUSTOMER entity. This visual representation offers a quick overview of the database schema, showcasing how tables are interconnected and providing insight into the relationships between entities and their attributes. The code snippet includes an extraneous command (`show tables;%%| echo: false`), which seems to be a mix of syntax and should be removed for clarity.

```{mermaid}
erDiagram
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
    CUSTOMER{
        int id
        string first_name
        string last_name
    }
    DELIVERY-ADDRESS {
        int id
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

# SQL query to select all records from the skills table
sql_skills = "SELECT * FROM skills;"

# Execute the query and display the result
try:
    df_skills = pd.read_sql(sql_skills, cnx)
    df_skills
except Exception as e:
    message_skills = str(e)
    print(f"An error occurred:\n\n{message_skills}\n\nIgnoring and moving on.")
    df_skills = pd.DataFrame()
df_skills
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

# SQL query to select all records from the roles table
sql_roles = "SELECT * FROM roles;"

# Execute the query and display the result
try:
    df_roles = pd.read_sql(sql_roles, cnx)
    df_roles
except Exception as e:
    message_roles = str(e)
    print(f"An error occurred:\n\n{message_roles}\n\nIgnoring and moving on.")
    df_roles = pd.DataFrame()
df_roles
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name



```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT name AS skills_name, tag AS skills_tag, description AS skills_description
FROM skills
ORDER BY name ASC;
"""
try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```



### List people names and email addresses ordered by last_name
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT first_name, last_name, email
FROM people
ORDER BY last_name ASC;
"""
try:
    df = pd.read_sql(sql_skills,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT s.skills_name
FROM skills s
JOIN peopleskills ps ON s.skills_id = ps.skills_id
WHERE ps.people_id = 1 ; 
"""
try:
    df_skills = pd.read_sql(sql_skills,cnx)
    df_skills
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df_skills = pd.DataFrame()
df_skills
```

### List people names with Skill 6
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT p.first_name, p.last_name
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
WHERE ps.skills_id = 6;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT p.first_name, p.last_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.role_id = r.roles_id
WHERE r.roles_name = 'Developer';
"""
try:
    df_roles = pd.read_sql(sql_roles,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df_roles = pd.DataFrame()
df
```

### List names and email addresses of people without skills
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT p.first_name, p.last_name, p.email
FROM people p
LEFT JOIN peopleskills ps ON p.people_id = ps.people_id
WHERE ps.skills_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT s.skills_name, s.skills_tag
FROM skills s
LEFT JOIN peopleskills ps ON s.skills_id = ps.skills_id
WHERE ps.people_id IS NULL;
"""
try:
    df_skills = pd.read_sql(sql_skills,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role
```{python}
#| echo: false
#| eval: true
sql = """
SELECT DISTINCT p.first_name, p.last_name, s.name AS skills_name
FROM people p
JOIN peopleroles pr ON p.id = pr.people_id
JOIN roles r ON pr.role_id = r.id AND r.name = 'Boss'
LEFT JOIN peopleskills ps ON p.id = ps.people_id
LEFT JOIN skills s ON ps.skills_id = s.id;
"""

try:
    df_roles = pd.read_sql(sql_roles, cnx)
    df_roles
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df_roles = pd.DataFrame()

df_roles
```

### List ids and names of unused roles
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT r.roles_id, r.roles_name
FROM roles r
LEFT JOIN peopleroles pr ON r.roles_id = pr.role_id
WHERE pr.people_id IS NULL;
"""
try:
    df_roles = pd.read_sql(sql_roles,cnx)
    df_roles
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df_roles
```

## Reflection

The main issues I had were with connection. Although I was able to figure it out in the end, overall that was the hardest part for me. Another part that was difficult was the module installations. I had installed python and poetry etc from homework 6 but when it came to this assignment, its as if I hadent downloaded any of that, so I had to start from step one. This assignemnt was one of the more difficult ones when it came to connections. This assignment basically underlined critical importance of precise naming conventions and the foresight necessary for scalable design. The manual assignment of IDs and the shift to auto-increment highlighted the transition from manual control to database-managed processes. NULL handling prompted a thoughtful reflection on the essence of data and its representation. The assignment offered a clear narrative on the intricacies of database administration, shedding light on the meticulous care and strategic foresight inherent in crafting robust data management systems.